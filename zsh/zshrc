# Begin oh-my-zsh config

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="nominaltech"
#ZSH_THEME="nominaltech2"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history-substring-search gitignore)

source $ZSH/oh-my-zsh.sh

# End oh-my-zsh config

# ------------------------------------------------
# Silly fixes                                    |
# ------------------------------------------------

alias dus="du -h -d 1 | sort -h"

# Make these commands ask before clobbering a file. Use -f to override.
alias rm="rm -R -i"

# Ignore duplicate commands in history
export HISTCONTROL=ignoredups

# ------------------------------------------------
# Custom functions                               |
# ------------------------------------------------
#
function installed {
	hash $1 2>/dev/null || alias $1 > /dev/null 2>&1
}

if installed pbcopy; then
	alias clip=pbcopy
elif installed xclip; then
	alias clip='xclip -selection c'
fi

# Compile .java, then run its .class
runjava () {
  javac -g $1.java;
  java $1;
}

# Extract function, courtesy of Itai Ferber
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1        ;;
            *.tar.gz)   tar -zxvf $1        ;;
            *.bz2)      bunzip2 $1          ;;
            *.dmg)      hdiutul mount $1    ;;
            *.gz)       gunzip $1           ;;
            *.tar)      tar -xvf $1         ;;
            *.tbz2)     tar -jxvf $1        ;;
            *.tgz)      tar -zxvf $1        ;;
            *.zip)      unzip $1            ;;
            *.Z)        uncompress $1       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()." ;;
        esac
    else
        echo "'$1' is not a valid file."
    fi
}

# Package tar function
tarball () {
    tar -cvzf $1.tar.gz ${@:2} $1
}
git-tarball () {
    git archive --format=tar.gz HEAD $1 > $1.tar.gz
}

function fileio {
	if installed curl; then
		should_rm=false
		if [ -d $1 ]; then
			filename="/tmp/$1.tar.gz"
			tar -cvzf $filename $1
			should_rm=true
		elif [ -f $1 ]; then
			filename=$1
		else
			echo "ERROR: $1 is not a file or directory"
			return 1
		fi
		if installed jq; then
			link=$(curl -F "file=@$filename" 'https://file.io/?expires=1d' | jq '.link' -j)
			#filename=$(basename "$1")
			#result="curl '$link' > $filename"
			result=$link
			if installed clip; then
				printf $result | clip
			else
				echo "WARNING: could not copy to clipbord"
			fi
			echo $result
		else
			echo "WARNING: could not parse response, please install jq"
			curl -F "file=@$filename" 'https://file.io/?expires=1d'
		fi
		if $should_rm; then
			rm -rf $filename
		fi
	else
		echo "ERROR: curl must be installed"
		return 1
	fi
}


alias gac="ga -A; gc -m '~'"
alias gacp="ga -A; gc -m '~'; git push"

#--------------------------------------------------
# Environment Variables                           |
#--------------------------------------------------
export EDITOR=vim
export VISUAL=vim
export GIT_EDITOR=vim

# Load localrc for local-only shell config
if [ -e ~/.localrc ]; then
	source ~/.localrc
fi

