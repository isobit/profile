scriptencoding utf-8
set encoding=utf-8
set nocompatible

" autocommand group for vimrc, autocommands in this file should all be assigned
" to this group
augroup vimrc
	" Delete existing, makes it safe to reload vimrc
	autocmd!
augroup END

" ===================== Plugins ============================

" Plugin settings that must be set before loading
let g:polyglot_disabled = ['arduino', 'caddyfile', 'hcl', 'cue']

" Load plugins using plug
call plug#begin($HOME.'/.config/vim-plug')

Plug 'tpope/vim-sensible' " Sensible default options

" Interface
Plug 'scrooloose/nerdtree'     " Project directory tree
Plug 'jistr/vim-nerdtree-tabs' " Makes NERDTree work with tabs

" FZF
if executable('fzf')
	Plug 'junegunn/fzf'
	Plug 'junegunn/fzf.vim'
endif

" Editing
Plug 'editorconfig/editorconfig-vim'    " .editorconfig file
Plug 'ervandew/supertab'                " Tab completion
Plug 'godlygeek/tabular'                " :Tab to align given format
Plug 'jiangmiao/auto-pairs'             " Autoclose quotes and other delimiters
Plug 'markonm/traces.vim'               " Range, pattern, and substitute live preview
Plug 'sickill/vim-pasta'                " Adjust pasting to destination context
Plug 'stefandtw/quickfix-reflector.vim' " modifiable quickfix
Plug 'tpope/vim-abolish'                " :S to do smart substitute (understands capitalization)
Plug 'tpope/vim-commentary'             " gc to comment
Plug 'tpope/vim-sleuth'                 " Autodetect tabbing
Plug 'tpope/vim-speeddating'            " Support for datetime incrementing
Plug 'tpope/vim-surround'               " cs to change surrounding delimiters

" Languages
Plug 'sheerun/vim-polyglot'
Plug 'isobit/vim-terraform'
Plug 'isobit/vim-packer'
Plug 'rust-lang/rust.vim'
Plug 'jjo/vim-cue'

" Colors
Plug 'isobit/vim-darcula-colors'

" Plugin dev
" Plug 'gerw/vim-HiLinkTrace'    " :HLT! to show highlighting trace

if has('nvim')
	Plug 'neovim/nvim-lspconfig' " LSP
else
	Plug 'scrooloose/syntastic' " Syntax checking
endif

call plug#end()

" ================ Plugin Settings ===================

let g:jsx_ext_required = 1
let g:nerdtree_tabs_focus_on_files = 1
let g:NERDTreeIgnore = ['\.o$', '\.pyc$', '\.egg-info$', '^__pycache__$']
let g:NERDTreeCaseSensitiveSort = 1
let g:session_autosave = 'no'
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_yaml_frontmatter = 1
let g:terraform_fold_sections = 1
let g:SuperTabDefaultCompletionType = "context"

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_go_checkers = ['go', 'gofmt', 'govet']
let g:syntastic_ignore_files = ['\.env$']

" ================ General Config ====================

" Load LUA setup if in neovim
if has('nvim')
	lua require('setup')
endif

set number        " Enable line numbers
set numberwidth=4 " Use up to four digits
set showcmd       " Show incomplete cmds down the bottom
set showmode      " Show current mode down the bottom
set visualbell    " No sounds
set mouse=a       " Enables the mouse
set modelines=5   " Enables modelines
set spell         " Enable spell checking
set splitright    " V-splits open to the right
set splitbelow    " H-Splits open downwards

" Reload files changed outside vim, but prompt if changed locally
au CursorHold,CursorHoldI,FileChangedShell * silent! checktime

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Turn on syntax highlighting
syntax on

" Turn on filetype plugins (and indent)
filetype on
filetype plugin on
filetype indent on

" Theme
silent! colors darcula

" Vertical split character
set fillchars=""

" Highlight trailing whitespace when not in insert mode
try
	" Check if the highlight group exists first by attempting to get
	" information about it from the highlight command (redirected to the black
	" hole register to prevent output)
	redir @_
	highlight TrailingWhitespace
	redir END
	function! SetTrailingWhitespaceEnabled(enabled)
		if a:enabled && !exists('w:tws_id')
			let w:tws_id = matchadd('TrailingWhitespace', '\s\+$')
		end
		if !a:enabled && exists('w:tws_id')
			call matchdelete(w:tws_id)
			unlet w:tws_id
		end
	endfunction
	autocmd vimrc InsertEnter * call SetTrailingWhitespaceEnabled(0)
	autocmd vimrc BufNewFile,BufRead,InsertLeave * call SetTrailingWhitespaceEnabled(1)
catch
	" Do nothing if highlight group is not found
endtry

" Highlight NOCOMMIT like TODO
autocmd vimrc Syntax * syn keyword Todo contained NOCOMMIT

" Custom function for cleaning up trailing whitespace
function! CleanWhitespace()
	let l:search=&hlsearch
	:%s/\s\+$//e
	let &hlsearch=l:search
endfunction
command -nargs=? CleanWhitespace :call CleanWhitespace(<f-args>)

" Custom listchars
set listchars=eol:$,tab:>-,trail:·,extends:>,precedes:<
if has("patch-7.4.710")
	set listchars+=space:·
endif

" Don't clutter working directories with backup and swap files
set directory=~/.vim/backups//
set backupdir=~/.vim/backups

" Keep undo history across sessions
set undodir=~/.vim/backups
set undofile

" Scrolling
set sidescroll=1

" Start scrolling when we're this many lines away from margins.
set scrolloff=3
set sidescrolloff=15

" Disable bell
set noeb vb t_vb=
autocmd vimrc GUIEnter * set vb t_vb=

" Don't show preview window for completions
set completeopt-=preview
" ================ Search  ==========================

set viminfo='100,f1  "Save up to 100 marks, enable capital marks
set ignorecase
set smartcase

" ================ Indentation ======================

"set smartindent

" Use tabs with a width of 4 by default
set noexpandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

function! SetTab(...)
	if a:0 == 0
		" No arguments means use tabs and make them look like 4 spaces
		set noexpandtab
		set shiftwidth=4
		set tabstop=4
		set softtabstop=4
	else
		" If argument is passed, use n spaces (where n is the argument)
		set expandtab
		let &tabstop=a:1
		let &softtabstop=a:1
		let &shiftwidth=a:1
	endif
endfunction
command! -nargs=? SetTab :call SetTab(<f-args>)

" Indentation style
set cino= " Reset cinoptions
set cino+=l1 " Align with case label instead of statement after it in same line
set cino+=h0 " No indent inside C++ scope declarations (public/private)
set cino+=t0 " No indent for function return type on separate line
set cino+=(0 " When in parens, line up with the next non-white char
set cino+=Ws " Don't align in parens when opening paren is the last char in its line
set cino+=m1 " Line up closing paren with the first char of opening paren line
set cino+=j1 " Indent Java anonymous classes correctly
set cino+=J1 " Indent JavaScript object declarations correctly
set cino+=*500 " Search for unclosed comments at most N lines away
set cino+=)500 " Search for unclosed parens at most N lines away

" ================= Line Wrapping ===================

set textwidth=79 " Use 80 as the max line length
set nowrap       " Don't wrap lines by default
set fo=croqn

" Allow toggling between wrapping and not wrapping
function! WrapToggle()
	if &wrap
		set nowrap
	else
		set wrap
	endif
endfunction
command! -nargs=? WrapToggle :call SetTab(<f-args>)
" See mapping section for key binding

" Wrap lines at convenient points
set linebreak

" Highlights characters past the textwidth
try
	" Check if the highlight group exists first by attempting to get
	" information about it from the highlight command (redirected to the black
	" hole register to prevent output)
	redir @_
	hi OverLength
	redir END
	autocmd vimrc FileType * execute 'match OverLength /\%'.(&textwidth + 1).'v.\+/'
catch
	" Do nothing if highlight group is not found
endtry

" ================ Folds ============================

" Fold manually, set to indent for indent
set foldmethod=manual

" Don't fold by default
set nofoldenable

" ================ Command Completion =======================

set wildmode=list:longest
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Fixes ============================

" Recognize ESC sequences in 10ms to make leaving insert mode quicker
set timeoutlen=1000 ttimeoutlen=10

" Display vertical line cursor for insert mode
if &term =~ "screen.*"
	let &t_ti.="\eP\e[1 q\e\\"
	let &t_SI.="\eP\e[5 q\e\\"
	let &t_EI.="\eP\e[1 q\e\\"
	let &t_te.="\eP\e[0 q\e\\"
elseif $TERM_PROGRAM =~ "iTerm.*"
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
elseif &term !~ "linux"
	let &t_ti.="\<Esc>[1 q"
	let &t_SI.="\<Esc>[5 q"
	let &t_EI.="\<Esc>[1 q"
	let &t_te.="\<Esc>[0 q"
endif

" Fix bad background/foreground colors on some terminals
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"

" Color fix for gnome-terminal scrolling
if &term =~ '256color'
	set t_ut=
	set t_Co=256
endif

" Don't replace paste buffer when using vp
function! RestoreRegister()
	let @" = s:restore_reg
	return ''
endfunction
function! s:Repl()
	let s:restore_reg = @"
	return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Turn on spell checking in git commits
autocmd vimrc FileType gitcommit setlocal spell

" Properly indent c++11 lambdas
" autocmd vimrc FileType cpp setlocal cindent cino=j1,(0,ws,Ws

" Hide ~ for empty lines
" highlight EndOfBuffer ctermbg=bg ctermfg=bg guibg=bg guifg=bg

" Better filetype detection for Go HTML templates
function DetectGoHtmlTmpl()
    if expand('%:e') == "html" && search("{{") != 0
        set filetype=gohtmltmpl
    endif
endfunction
autocmd vimrc BufRead,BufNewFile * call DetectGoHtmlTmpl()

autocmd vimrc BufRead,BufNewFile *.tmpl :set filetype=gotexttmpl

" Commenting in SQL files
autocmd vimrc FileType sql setlocal commentstring=--\ %s

" ================ Mappings ==========================

" Window moving shortcuts
nmap <silent> gk :wincmd k<cr>
nmap <silent> gj :wincmd j<cr>
nmap <silent> gh :wincmd h<cr>
nmap <silent> gl :wincmd l<cr>

" \w to toggle line wrapping
map <leader>w mz:execute WrapToggle()<cr>`z

" \g to go to buf
noremap <silent> <leader>g :ls<cr>:b

" \t to toggle NERDTree
noremap <silent> <leader>t :NERDTreeTabsToggle<cr>

" \h to find file in NERDTree
noremap <silent> <leader>h :NERDTreeTabsFind<cr>

" \d to open NERDTree and find file
noremap <silent> <leader>d :NERDTreeTabsOpen<cr><c-w><c-p>:NERDTreeTabsFind<cr><c-w><c-p>

" \c clears the quickfix list and the search highlight (until the next search)
noremap <leader>c :call setqflist([])<cr>:noh<cr>

" n goes to next quickfix location when active
nnoremap <expr> n ((len(getqflist()) > 0)?':cn<cr>':'n')

" N goes to prev quickfix location when active
nnoremap <expr> N ((len(getqflist()) > 0)?':cp<cr>':'N')

" \o to open a file using FZF
nnoremap <leader>o :FZF<cr>

" \f to open a live ripgrep file search
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
nnoremap <leader>f :RG<cr>

" \f to ripgrep selected text when in visual mode
vnoremap <leader>f "sy:RG <c-r>s<cr>

" \F to ripgrep word under cursor when in normal mode
nnoremap <leader>F viw"sy:RG <c-r>s<cr>

" \s to substitute selected text with confirmation
vnoremap <leader>s "sy:%s/<c-r>s//gc<left><left><left>

" \S to substitute selected text
vnoremap <leader>S "sy:%s/<c-r>s//g<left><left>

" J to join line
vnoremap J :left<cr>gv:join!<cr>gv:s/,/, /ge<cr>gv=gv:s/\s\+$//e<cr>

" K to split line
vnoremap K <esc>o<esc>mkgv:s/\([({\[,]\)/\1\r/ge<cr>`<v`k:s/\([)}\]]\)/\r\1/ge<cr>`<v`k=`kddk

" \a for aligning/tabularizing
vnoremap <leader>a= :Tabularize /=<cr>
vnoremap <leader>a: :Tabularize /:\zs<cr>
vnoremap <leader>as :Tabularize multiple_spaces<cr>

" :w!! to sudo write
cmap w!! w !sudo tee % >/dev/null

" :W is :w
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))

" CTRL-A CTRL-Q to select all and build quickfix list
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction
let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

" LSP navigation
nnoremap gd <cmd>lua vim.lsp.buf.definition()<cr>
nnoremap gD <cmd>lua vim.lsp.buf.declaration()<cr>
nnoremap gr <cmd>lua vim.lsp.buf.references()<cr>

" LSP diagnostics
nnoremap <leader>e <cmd>lua vim.diagnostic.open_float()<cr>
nnoremap <leader>q <cmd>lua vim.diagnostic.setloclist()<cr>

" LSP info
nnoremap <leader>i <cmd>lua vim.lsp.buf.hover()<cr>

" LSP actions
noremap <leader>r <cmd>lua vim.lsp.buf.rename()<cr>
noremap <leader>a <cmd>lua vim.lsp.buf.code_action()<cr>

" ===================== Local config ==========================
set secure
if filereadable(glob('~/.vimrc.local'))
	source ~/.vimrc.local
endif

set exrc
set secure
