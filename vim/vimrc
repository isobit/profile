set nocompatible

" ===================== Plugins ============================

call plug#begin()

Plug 'tpope/vim-sensible' " Sensible default options
Plug 'xolox/vim-misc'
Plug 'mattn/webapi-vim'

" Interface
Plug 'scrooloose/nerdtree'     " Project directory tree
Plug 'jistr/vim-nerdtree-tabs' " Makes NERDTree work with tabs
Plug 'yggdroot/indentline'     " Indentation guide lines
Plug 'gerw/vim-HiLinkTrace'    " :HLT! to show highlighting trace
Plug 'mattn/gist-vim'          " :Gist to post to GitHub Gist

" Editing
Plug 'ervandew/supertab'    " Tab completion
Plug 'godlygeek/tabular'    " :Tab to align given format
Plug 'jiangmiao/auto-pairs' " Autoclose quotes and other delimiters
Plug 'scrooloose/syntastic' " Syntax checking
Plug 'sickill/vim-pasta'    " Adjust pasting to destination context
Plug 'tomtom/tcomment_vim'  " gc to comment
Plug 'tpope/vim-abolish'    " :S to do smart substitute (understands capitalization)
Plug 'tpope/vim-sleuth'     " Autodetect tabbing
Plug 'tpope/vim-surround'   " cs to change surrounding delimiters
Plug 'xolox/vim-session' 	" Better sessions, :SaveSession and :OpenSession

" Languages
Plug 'sheerun/vim-polyglot'
Plug 'isobit/vim-caddyfile'
Plug 'posva/vim-vue'
Plug 'gutenye/json5.vim'

" Colors
Plug 'isobit/vim-darcula-colors'

call plug#end()

" ================ Plugin Settings ===================

let g:indentLine_char = '|'
let g:indentLine_setColors = 0
let g:jsx_ext_required = 1
let g:nerdtree_tabs_focus_on_files = 1
let g:nerdtree_tabs_synchronize_view = 0
let g:polyglot_disabled = ['arduino']
let g:session_autosave = 'no'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers = ['python']
let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_math = 1
let g:vim_markdown_toml_frontmatter = 1

" ================ General Config ====================

set number        " Enable line numbers
set numberwidth=4 " Use up to four digits
set showcmd       " Show incomplete cmds down the bottom
set showmode      " Show current mode down the bottom
set visualbell    " No sounds
set mouse=a       " Enables the mouse
set modelines=5   " Enables modelines
set spell         " Enable spell checking
set splitright    " V-splits open to the right
set splitbelow    " H-Splits open downwards

" Reload files changed outside vim, but prompt if changed locally
au CursorHold,CursorHoldI,FileChangedShell * silent! checktime

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Turn on syntax highlighting
syntax on

" Turn on filetype plugins (and indent)
filetype on
filetype plugin on
filetype indent on

" Theme
silent! colors darcula

" Vertical split character
set fillchars=""

" Highlight trailing whitespace when not in insert mode
augroup vimrc_match_trailingwhitespace
	autocmd!
	autocmd InsertEnter * call matchdelete(s:tws_id)
	autocmd BufNewFile,BufRead,InsertLeave * let s:tws_id=matchadd('TrailingWhitespace', '\s\+$')
augroup END

" Custom listchars
set listchars=eol:$,tab:>-,trail:·,extends:>,precedes:<,space:·

" Turn off swap files.
set noswapfile
set nobackup
set nowb

" Keep undo history across sessions
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" Scrolling
set sidescroll=1

" Start scrolling when we're this many lines away from margins.
set scrolloff=3
set sidescrolloff=15

" Disable bell
set noeb vb t_vb=
au GUIEnter * set vb t_vb=

" ================ Search  ==========================

set viminfo='100,f1  "Save up to 100 marks, enable capital marks
set ignorecase
set smartcase

" ================ Indentation ======================

set smartindent

" Use \t with a width of 4 by default
set noexpandtab
set shiftwidth=4
set tabstop=4

function SetTab(...)
	if a:0 == 0
		set noexpandtab
		set shiftwidth=4
		set tabstop=4
	else
		set expandtab
		let &shiftwidth=a:1
		let &tabstop=a:1
	endif
endfunction
command -nargs=? SetTab :call SetTab(<f-args>)

" Indentation style
set cinoptions=*200
" set cinoptions=(0,m1,J1,j1,*200

" ================= Line Wrapping ===================

set textwidth=79 " Use 80 as the max line length
set nowrap       " Don't wrap lines by default

" Allow toggling between wrapping and not wrapping
function WrapToggle()
	if &wrap
		set nowrap
	else
		set wrap
	endif
endfunction
" Mapped to \w
map <leader>w mz:execute WrapToggle()<cr>`z

" Wrap lines at convenient points
set linebreak

" Highlights characters past the textwidth
augroup vimrc_match_overlength
	autocmd!
	autocmd FileType * execute 'match OverLength /\%'.(&textwidth + 1).'v.\+/'
augroup END

" ================ Folds ============================

" Fold manually, set to indent for indent
set foldmethod=manual

" Don't fold by default
set nofoldenable

" ================ Command Completion =======================

set wildmode=list:longest
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Fixes ============================

" Recognize ESC sequences in 10ms to make leaving insert mode quicker
set timeoutlen=1000 ttimeoutlen=10

" Set up vertical line cursor for insert mode in iTerm2
if &term =~ "screen."
	let &t_ti.="\eP\e[1 q\e\\"
	let &t_SI.="\eP\e[5 q\e\\"
	let &t_EI.="\eP\e[1 q\e\\"
	let &t_te.="\eP\e[0 q\e\\"
elseif $TERM_PROGRAM =~ "iTerm"
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
else
	let &t_ti.="\<Esc>[1 q"
	let &t_SI.="\<Esc>[5 q"
	let &t_EI.="\<Esc>[1 q"
	let &t_te.="\<Esc>[0 q"
endif

" Fix bad background/foreground colors on some terminals
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"

" Color fix for gnome-terminal scrolling
if &term =~ '256color'
	set t_ut=
	set t_Co=256
endif

" vp doesn't replace paste buffer
function! RestoreRegister()
	let @" = s:restore_reg
	return ''
endfunction
function! s:Repl()
	let s:restore_reg = @"
	return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Turn on spell checking in git commits
augroup vimrc_gitcommit_spell
	autocmd!
	autocmd FileType gitcommit setlocal spell
augroup END

" Properly indent c++11 lambdas
" augroup vimrc_cpp11_lambda_cino
" 	autocmd FileType cpp setlocal cindent cino=j1,(0,ws,Ws
" augroup END

" Hide ~ for empty lines
highlight EndOfBuffer ctermbg=bg ctermfg=bg guibg=bg guifg=bg

" ================ Mappings ==========================

" Window moving shortcuts
nmap <silent> gk :wincmd k<cr>
nmap <silent> gj :wincmd j<cr>
nmap <silent> gh :wincmd h<cr>
nmap <silent> gl :wincmd l<cr>

" \g to go to buf
noremap <silent> <leader>g :ls<cr>:b

" \t to toggle NERDTree
noremap <silent> <leader>t :NERDTreeTabsToggle<cr>

" \f to find file in NERDTree
noremap <silent> <leader>f :NERDTreeTabsFind<cr>

" \d to open NERDTree and find file
noremap <silent> <leader>d :NERDTreeTabsOpen<cr><c-w><c-p>:NERDTreeTabsFind<cr><c-w><c-p>

" \c clears the quickfix list
noremap <leader>c :call setqflist([])<cr>

" n goes to next quickfix location when active
nnoremap <expr> n ((len(getqflist()) > 0)?':cn<cr>':'n')

" N goes to prev quickfix location when active
nnoremap <expr> N ((len(getqflist()) > 0)?':cp<cr>':'N')

" \s to substitute selected text with confirmation
vnoremap <leader>s "sy:%s/<c-r>s//gc<left><left><left>

" \S to substitute selected text
vnoremap <leader>S "sy:%s/<c-r>s//g<left><left>

" J to join line
vnoremap J :left<cr>gv:join!<cr>gv:s/,/, /ge<cr>gv=gv:s/\s\+$//e<cr>

" K to split line
vnoremap K <esc>o<esc>mkgv:s/\([({\[,]\)/\1\r/ge<cr>`<v`k:s/\([)}\]]\)/\r\1/ge<cr>`<v`k=`kddk

" :w!! to sudo write
cmap w!! w !sudo tee % >/dev/null

" :W is :w
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))

" ===================== Local config ==========================
set secure
if filereadable(glob('~/.vimrc.local'))
	source ~/.vimrc.local
endif
