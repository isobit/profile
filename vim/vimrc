set nocompatible " required for vim

" ===================== Vundle ============================

filetype off " required for Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" User defined Plugins
Plugin 'embear/vim-localvimrc'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tomtom/tcomment_vim'
Plugin 'cohama/lexima.vim'
Plugin 'tpope/vim-surround'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-abolish'
Plugin 'gerw/vim-HiLinkTrace'

" Languages
Plugin 'groenewege/vim-less'
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'derekwyatt/vim-scala'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'dart-lang/dart-vim-plugin'
Plugin 'solarnz/thrift.vim'
Plugin 'sudar/vim-arduino-syntax'
Plugin 'elzr/vim-json'
Plugin 'gutenye/json5.vim'
Plugin 'vim-jp/vim-cpp'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'vim-scripts/jade.vim'
Plugin 'vim-scripts/MatlabFilesEdition'
Plugin 'rust-lang/rust.vim'
Plugin 'cespare/vim-toml'
Plugin 'joshglendenning/vim-caddyfile'

" Colors
Plugin 'joshglendenning/vim-darcula-colors'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" ================ General Config ====================

set number                      "Line numbers are good
set numberwidth=4
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set visualbell                  "No sounds
set mouse=a                     "Enables the mouse
set laststatus=2				"Enables status line even in single buffer
au CursorHold,CursorHoldI * silent! checktime "Reload files chnaged outside vim, but prompt if changed locally

" Set up vertical line cursor for insert mode in iTerm2
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" upon hitting escape to change modes,
" send successive move-left and move-right
" commands to immediately redraw the cursor
inoremap <special> <Esc> <Esc>hl

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"

" turn on syntax highlighting
syntax on

" theme
colors darcula

" Highlights characters past column 80
" highlight OverLength ctermbg=darkgray
" match OverLength /\%81v.\+/

" Change split separator to whitespace
set fillchars+=vert:\ 

" ================ Search Settings  =================

set incsearch        "Find the next match as we type the search
set viminfo='100,f1  "Save up to 100 marks, enable capital marks
set ignorecase
set smartcase

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4

set cino=(s,m1

filetype on
filetype plugin on
filetype indent on

" Allow toggling between wrapping and not wrapping
function WrapToggle()
   if &wrap
      set nowrap
   else
      set wrap
   endif
endfunction
" Mapped to \w
map <Leader>w mz:execute WrapToggle()<CR>`z

" Display tabs and trailing spaces visually with middle dot char
set list listchars=tab:\ \ ,trail:Â·

"Wrap lines at convenient points
set linebreak

" ================ Folds ============================

"fold manually, set to indent for indent
set foldmethod=manual

"dont fold by default
set nofoldenable

" ================ Completion =======================

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================

"Start scrolling when we're this many lines away from margins
set scrolloff=3

set sidescrolloff=15
set sidescroll=1

" ================ Fixes ============================

" color fix for gnome-terminal scrolling
if &term =~ '256color'
	set t_ut=
endif

" front-matter syntax highlighting for md and html
autocmd Filetype html,markdown,liquid syntax match Comment /\%^---\_.\{-}---$/
autocmd Filetype html,markdown,liquid syntax match Comment /\_.\{-}---$/

" ================ Window Moving Shortcuts ==========

nmap <silent> gk :wincmd k<CR>
nmap <silent> gj :wincmd j<CR>
nmap <silent> gh :wincmd h<CR>
nmap <silent> gl :wincmd l<CR>

" ================ Mappings ==========================

" \s to save
noremap <Leader>s :update<CR>

" \c to comment out
noremap <silent> <Leader>c gc<CR>

" \t to toggle NERDTree
noremap <silent> <Leader>t :NERDTreeTabsToggle<CR>

" :w!! to sudo write
cmap w!! w !sudo tee % >/dev/null

" HTML Tag Auto-Completion
map! <// </<C-X><C-O>

" :W is :w
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))

" \l to toggle list mode
noremap <silent> <Leader>l :set list!<CR>

" vp doesn't replace paste buffer
function! RestoreRegister()
	let @" = s:restore_reg
	return ''
endfunction
function! s:Repl()
	let s:restore_reg = @"
	return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" J to join line
vnoremap J :left<CR>gv:join!<CR>gv:s/,/, /ge<CR>gv=gv:s/\s\+$//e<CR>

" K to split line
vnoremap K <ESC>o<ESC>mkgv:s/\([({\[,]\)/\1\r/ge<CR>`<v`k:s/\([)}\]]\)/\r\1/ge<CR>`<v`k=`kddk

" n goes to next quickfix location when active
nnoremap <expr> n ((len(getqflist()) > 0)?':cn<CR>':'n')

" N goes to prev quickfix location when active
nnoremap <expr> N ((len(getqflist()) > 0)?':cp<CR>':'N')

" \c clears the quickfix list
noremap <Leader>c :call setqflist([])<CR>

" ===================== Project Settings ===============
set exrc
set secure
