#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")"
source ./install_utils.sh

task_sh() {
	[[ -z ${_TASK_SH+x} ]] || return 0
	[[ -n ${1+x} ]] || log_util 'TASK' 'sh'
	ensure_ln_s ./sh/inputrc ~/.inputrc
	ensure_ln_s ./sh/profile ~/.profile
	_TASK_SH=true
}

task_home() {
	log_util 'TASK' 'home'
	ensure_mkdir  ~/.config
	ensure_ln_s ./xdg/user-dirs.dirs ~/.config/user-dirs.dirs
	ensure_ln_s ./xdg/user-dirs.locale ~/.config/user-dirs.locale
}

task_vim() {
	log_util 'TASK' 'vim'
	ensure_mkdir ~/.vim
	ensure_ln_s ./vim/vimrc ~/.vimrc

	ensure_pkg vim || { log_error "vim is required to install vim-plug"; return 1; }
	ensure_pkg git || { log_error "git is required to install vim-plug"; return 1; }
	ensure_pkg curl || { log_error "curl is required to install vim-plug"; return 1; }

	if [ ! -f ~/.vim/autoload/plug.vim ]; then
		log_info "Installing vim-plug"
		curl -fLs -o ~/.vim/autoload/plug.vim --create-dirs \
			    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
				|| { log_error "Failed to download plug.vim"; return 1; }
	fi
	log_info "Running PlugUpdate"
	vim +PlugClean +PlugUpdate +qa
	ensure_ln_s ./vim/after ~/.vim/after
}

task_neovim() {
	log_util 'TASK' 'neovim'
	ensure_mkdir ~/.config/nvim
	ensure_ln_s ./vim/vimrc ~/.config/nvim/init.vim

	ensure_pkg nvim neovim || { log_error "neovim is required to install vim-plug"; return 1; }
	ensure_pkg git || { log_error "git is required to install vim-plug"; return 1; }
	ensure_pkg curl || { log_error "curl is required to install vim-plug"; return 1; }

	ensure_mkdir ~/.local/share/nvim/site/autoload
	if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
		log_info "Installing vim-plug"
		curl -fLs -o ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
				https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
				|| { log_error "Failed to download plug.vim"; return 1; }
	fi
	log_info "Running PlugUpdate"
	nvim +PlugClean +PlugUpdate +qa
	ensure_ln_s ./vim/after ~/.config/nvim/after
}

task_zsh() {
	log_util 'TASK' 'zsh'
	task_sh true
	ensure_ln_s ./zsh/zshrc ~/.zshrc
	ensure_ln_s ./zsh/zshrc.d ~/.zshrc.d
	ensure_ln_s ./zsh/functions ~/.zsh-functions

	if [[ ! -f ~/.zshenv ]]; then
		log_info "Creating default ~/.zshenv"
		echo "export ZSH_VI_MODE=true" > ~/.zshenv
		echo "export ZSH_PROMPT_HIDE_HOST=false" >> ~/.zshenv
	fi

	ensure_pkg zsh

	local shell_bin="$(cat /etc/shells | grep zsh | head -n 1)"
	if [ ! "$SHELL" = "$shell_bin" ]; then
		local chsh_cmd="chsh -s $shell_bin"
		if prompt_yn "Change login shell to zsh?"; then
			log_info "Changing login shell to zsh"
			eval $chsh_cmd || log_warn "${chsh_cmd} failed, please do this manually"
		else
			log_info "Shell can be changed later by running '${chsh_cmd}'"
		fi
	else
		log_info "$shell_bin is already the default shell"
	fi
}

task_bash() {
	log_util 'TASK' 'bash'
	task_sh true
	ensure_ln_s ./bash/bashrc ~/.bashrc
}

task_screen() {
	log_util 'TASK' 'screen'
	ensure_ln_s ./screen/screenrc ~/.screenrc
	ensure_pkg screen
}

task_git() {
	log_util 'TASK' 'git'
	ensure_ln_s ./git/gitconfig.defaults ~/.gitconfig.defaults
	ensure_ln_s ./git/gitignore.global ~/.gitignore.global
	#ensure_ln_s ./git/git-p4 /usr/lib/git-core/git-p4
	ensure_mkdir ~/bin
	ensure_ln_s ./git/diff-so-fancy ~/bin/diff-so-fancy

	if [[ -L ~/.gitconfig ]]; then
		log_warn "~/.gitconfig appears to be a symlink, perhaps from an old install..."
		if prompt_yn "Remove ~/.gitconfig symlink and replace with a new one which includes ~/.gitconfig.defaults (the new symlink)?"; then
			log_info "Removing ~/.gitconfig"
			rm ~/.gitconfig
			if [ $? -ne 0 ]; then
				log_error "Failed to remove ~/.gitconfig"
				exit 1
			fi
			if [[ -f ~/.gitconfig.local ]] && prompt_yn "Use existing ~/.gitconfig.local as base for new ~/.gitconfig?"; then
				log_nfo "Moving ~/.gitconfig.local to ~/.gitconfig"
				mv ~/.gitconfig.local ~/.gitconfig
				if [ $? -ne 0 ]; then
					log_error "Failed to move ~/.gitconfig.local to ~/.gitconfig"
					return 1
				fi
			fi
		else
			log_error "Failed to install git"
			exit 1
		fi
	fi

	log_info "Ensuring that ~/.gitconfig includes ~/.gitconfig.defaults"
	if ! git config --get include.path '~/.gitconfig.defaults' > /dev/null; then
		[[ -s ~/.gitconfig ]] || echo > ~/.gitconfig
		sed -i '1s|^|[include]\n\tpath = ~/.gitconfig.defaults\n|' ~/.gitconfig
	fi

	ensure_pkg git
}

task_icdiff() {
	log_util 'TASK' 'icdiff'
	ensure_mkdir ~/bin
	curl -s -o ~/bin/icdiff https://raw.githubusercontent.com/jeffkaufman/icdiff/release-1.9.2/icdiff
	chmod ugo+rx ~/bin/icdiff
}

task_tmux() {
	log_util 'TASK' 'tmux'
	ensure_mkdir ~/.tmux
	ensure_ln_s ./tmux/tmux.conf ~/.tmux.conf
	ensure_pkg tmux
}

task_gnupg() {
	log_util 'TASK' 'gnupg'
	ensure_mkdir ~/.gnupg
	ensure_ln_s ./gnupg/gpg.conf ~/.gnupg/gpg.conf
	ensure_pkg gpg gnupg
}

task_pgcli() {
	log_util 'TASK' 'pgcli'
	ensure_ln_s ./pgcli/config ~/.config/pgcli/config
	ensure_pkg pgcli
}


DEFAULT_TASKS="home sh vim bash zsh git screen gnupg"

while true; do
	case "${1:-}" in
		-h | --help)
			echo "Arguments should be a list of install tasks. If none are passed, the following defaults will be used:"
			echo "    $DEFAULT_TASKS"
			exit 1
			;;
		-y | --install-pkg-noconfirm)
			INSTALL_PKG_NOCONFIRM=true
			shift
			;;
		--) # End of all options
			shift
			break
			;;
		-*)
			log_error "Unknown option: ${1:-}"
			break
			;;
		*)  # No more options
			break
			;;
	esac
done

if [[ $# -eq 0 ]]; then
	TASKS="$DEFAULT_TASKS"
	log_info "Installing default tasks"
else
	TASKS="$@"
fi

for task in $TASKS; do
	case $task in
		sh)
			task_sh
			;;
		home | xdg)
			task_home
			;;
		vim)
			task_vim
			;;
		neovim | nvim)
			task_neovim
			;;
		zsh)
			task_zsh
			;;
		bash)
			task_bash
			;;
		screen)
			task_screen
			;;
		git)
			task_git
			;;
		icdiff)
			task_icdiff
			;;
		tmux)
			task_tmux
			;;
		gnupg | gpg)
			task_gnupg
			;;
		pgcli)
			task_pgcli
			;;
		*)
			log_error "Unknown task '$task'"
			;;
	esac
done
